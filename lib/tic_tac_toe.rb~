WIN_COMBINATIONS = [
	[0,1,2],
	[3,4,5],
	[6,7,8],
	[0,3,6],
	[1,4,7],
	[2,5,8],
	[0,4,8],
	[2,4,6]
]

def display_board(board=Array.new(9, " "))
	puts " #{ board[0..2].join(" | ")} #{"\n"+"-"*11+"\n"} #{ board[3..5].join(" | ")} #{"\n"+"-"*11+"\n"} #{ board[6..8].join(" | ")} "
end

def move(board, position, character)
	board[position.to_i - 1] = character
	return board
end

def position_taken?(board, location)
  !(board[location].nil? || board[location] == " ")
end

def valid_move?(board, position)
	case position_taken?(board, position)
	when true
		return false
	else
		return true
	end
end

def turn_count(board_array)
	count = 0
	full = true
	board_array.each do |space|
		if space == "X" || space == "O"
			count += 1
		elsif space == " "
			full = false
		end
	end
	return count
end

def current_player(board_array)
	count = 0
	full = true
	board_array.each do |space|
		if space == "X" || space == "O"
			count += 1
		elsif space == " "
			full = false
		end
	end
	if full == true
		return "Game over"
	elsif count % 2 == 0
		return "X"
	else
		return "O"
	end
end

def won?(board)
	winner = false
	WIN_COMBINATIONS.each do |combo|
		winning_combo = board[combo[0]].to_s + board[combo[1]].to_s + board[combo[2]].to_s
		winner = winning_combo == "XXX" || winning_combo == "OOO"
		if winner
			return combo
		end
	end
	return winner
end

def full?(board)
	if board.include?(" ")
		return false
	else
		return true
	end
end

def draw?(board)
	if full?(board) && won?(board) == false
		return true
	else
		return false
	end
end

def over?(board)
	if full?(board) || draw?(board) || won?(board)
		return true
	else
		return false
	end
end

def winner(board)
	if won?(board)
		return board[won?(board)[0]]
	else
		return nil
	end
end
